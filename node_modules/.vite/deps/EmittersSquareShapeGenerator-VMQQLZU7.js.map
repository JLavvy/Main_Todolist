{
  "version": 3,
  "sources": ["../../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShape.js", "../../@tsparticles/plugin-emitters-shape-square/browser/EmittersSquareShapeGenerator.js"],
  "sourcesContent": ["import { EmitterShapeBase } from \"@tsparticles/plugin-emitters\";\nimport { getRandom, halfRandom } from \"@tsparticles/engine\";\nconst half = 0.5, sides = 4, double = 2;\nfunction randomSquareCoordinate(position, offset) {\n    return position + offset * (getRandom() - halfRandom);\n}\nexport class EmittersSquareShape extends EmitterShapeBase {\n    constructor(position, size, fill, options) {\n        super(position, size, fill, options);\n    }\n    async init() {\n    }\n    randomPosition() {\n        const fill = this.fill, position = this.position, size = this.size;\n        if (fill) {\n            return {\n                position: {\n                    x: randomSquareCoordinate(position.x, size.width),\n                    y: randomSquareCoordinate(position.y, size.height),\n                },\n            };\n        }\n        else {\n            const halfW = size.width * half, halfH = size.height * half, side = Math.floor(getRandom() * sides), v = (getRandom() - halfRandom) * double;\n            switch (side) {\n                case 0:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y - halfH,\n                        },\n                    };\n                case 1:\n                    return {\n                        position: {\n                            x: position.x - halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n                case 2:\n                    return {\n                        position: {\n                            x: position.x + v * halfW,\n                            y: position.y + halfH,\n                        },\n                    };\n                case 3:\n                default:\n                    return {\n                        position: {\n                            x: position.x + halfW,\n                            y: position.y + v * halfH,\n                        },\n                    };\n            }\n        }\n    }\n}\n", "import { EmittersSquareShape } from \"./EmittersSquareShape.js\";\nexport class EmittersSquareShapeGenerator {\n    generate(position, size, fill, options) {\n        return new EmittersSquareShape(position, size, fill, options);\n    }\n}\n"],
  "mappings": ";;;;;;;;;;;AAEA,IAAM,OAAO;AAAb,IAAkB,QAAQ;AAA1B,IAA6B,SAAS;AACtC,SAAS,uBAAuB,UAAU,QAAQ;AAC9C,SAAO,WAAW,UAAU,UAAU,IAAI;AAC9C;AACO,IAAM,sBAAN,cAAkC,iBAAiB;AAAA,EACtD,YAAY,UAAU,MAAM,MAAM,SAAS;AACvC,UAAM,UAAU,MAAM,MAAM,OAAO;AAAA,EACvC;AAAA,EACA,MAAM,OAAO;AAAA,EACb;AAAA,EACA,iBAAiB;AACb,UAAM,OAAO,KAAK,MAAM,WAAW,KAAK,UAAU,OAAO,KAAK;AAC9D,QAAI,MAAM;AACN,aAAO;AAAA,QACH,UAAU;AAAA,UACN,GAAG,uBAAuB,SAAS,GAAG,KAAK,KAAK;AAAA,UAChD,GAAG,uBAAuB,SAAS,GAAG,KAAK,MAAM;AAAA,QACrD;AAAA,MACJ;AAAA,IACJ,OACK;AACD,YAAM,QAAQ,KAAK,QAAQ,MAAM,QAAQ,KAAK,SAAS,MAAM,OAAO,KAAK,MAAM,UAAU,IAAI,KAAK,GAAG,KAAK,UAAU,IAAI,cAAc;AACtI,cAAQ,MAAM;AAAA,QACV,KAAK;AACD,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI,IAAI;AAAA,cACpB,GAAG,SAAS,IAAI;AAAA,YACpB;AAAA,UACJ;AAAA,QACJ,KAAK;AACD,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI;AAAA,cAChB,GAAG,SAAS,IAAI,IAAI;AAAA,YACxB;AAAA,UACJ;AAAA,QACJ,KAAK;AACD,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI,IAAI;AAAA,cACpB,GAAG,SAAS,IAAI;AAAA,YACpB;AAAA,UACJ;AAAA,QACJ,KAAK;AAAA,QACL;AACI,iBAAO;AAAA,YACH,UAAU;AAAA,cACN,GAAG,SAAS,IAAI;AAAA,cAChB,GAAG,SAAS,IAAI,IAAI;AAAA,YACxB;AAAA,UACJ;AAAA,MACR;AAAA,IACJ;AAAA,EACJ;AACJ;;;ACxDO,IAAM,+BAAN,MAAmC;AAAA,EACtC,SAAS,UAAU,MAAM,MAAM,SAAS;AACpC,WAAO,IAAI,oBAAoB,UAAU,MAAM,MAAM,OAAO;AAAA,EAChE;AACJ;",
  "names": []
}
