import {
  EmitterShapeBase
} from "./chunk-JYWKISLK.js";
import "./chunk-Q3SJYVDK.js";
import {
  getRandom
} from "./chunk-SMEKTICL.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShape.js
var quarter = 0.25;
var double = 2;
var doublePI = Math.PI * double;
var squareExp = 2;
var half = 0.5;
var EmittersCircleShape = class extends EmitterShapeBase {
  constructor(position, size, fill, options) {
    super(position, size, fill, options);
  }
  async init() {
  }
  randomPosition() {
    const size = this.size, fill = this.fill, position = this.position, generateTheta = (x, y) => {
      const u = getRandom() * quarter, theta = Math.atan(y / x * Math.tan(doublePI * u)), v = getRandom();
      if (v < quarter) {
        return theta;
      } else if (v < double * quarter) {
        return Math.PI - theta;
      } else if (v < double * quarter + quarter) {
        return Math.PI + theta;
      } else {
        return -theta;
      }
    }, radius = (x, y, theta) => x * y / Math.sqrt((y * Math.cos(theta)) ** squareExp + (x * Math.sin(theta)) ** squareExp), [a, b] = [size.width * half, size.height * half], randomTheta = generateTheta(a, b), maxRadius = radius(a, b, randomTheta), randomRadius = fill ? maxRadius * Math.sqrt(getRandom()) : maxRadius;
    return {
      position: {
        x: position.x + randomRadius * Math.cos(randomTheta),
        y: position.y + randomRadius * Math.sin(randomTheta)
      }
    };
  }
};

// node_modules/@tsparticles/plugin-emitters-shape-circle/browser/EmittersCircleShapeGenerator.js
var EmittersCircleShapeGenerator = class {
  generate(position, size, fill, options) {
    return new EmittersCircleShape(position, size, fill, options);
  }
};
export {
  EmittersCircleShapeGenerator
};
//# sourceMappingURL=EmittersCircleShapeGenerator-TN3VRW3N.js.map
