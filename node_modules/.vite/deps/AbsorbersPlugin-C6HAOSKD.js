import {
  Absorber
} from "./chunk-STIH3D6V.js";
import "./chunk-Q3SJYVDK.js";
import {
  executeOnSingleOrMultiple,
  isArray,
  isInArray
} from "./chunk-SMEKTICL.js";
import "./chunk-ZS7NZCD4.js";

// node_modules/@tsparticles/plugin-absorbers/browser/AbsorbersPlugin.js
var AbsorbersPlugin = class {
  constructor() {
    this.id = "absorbers";
  }
  async getPlugin(container) {
    const { Absorbers } = await import("./Absorbers-QCODIDOF.js");
    return new Absorbers(container);
  }
  loadOptions(options, source) {
    var _a, _b;
    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {
      return;
    }
    if (source == null ? void 0 : source.absorbers) {
      options.absorbers = executeOnSingleOrMultiple(source.absorbers, (absorber) => {
        const tmp = new Absorber();
        tmp.load(absorber);
        return tmp;
      });
    }
    options.interactivity.modes.absorbers = executeOnSingleOrMultiple((_b = (_a = source == null ? void 0 : source.interactivity) == null ? void 0 : _a.modes) == null ? void 0 : _b.absorbers, (absorber) => {
      const tmp = new Absorber();
      tmp.load(absorber);
      return tmp;
    });
  }
  needsPlugin(options) {
    var _a, _b, _c;
    if (!options) {
      return false;
    }
    const absorbers = options.absorbers;
    if (isArray(absorbers)) {
      return !!absorbers.length;
    } else if (absorbers) {
      return true;
    } else if (((_c = (_b = (_a = options.interactivity) == null ? void 0 : _a.events) == null ? void 0 : _b.onClick) == null ? void 0 : _c.mode) && isInArray("absorber", options.interactivity.events.onClick.mode)) {
      return true;
    }
    return false;
  }
};
export {
  AbsorbersPlugin
};
//# sourceMappingURL=AbsorbersPlugin-C6HAOSKD.js.map
