{
  "version": 3,
  "sources": ["../../@tsparticles/plugin-absorbers/browser/Absorbers.js"],
  "sourcesContent": ["import { executeOnSingleOrMultiple, isNumber, itemFromSingleOrMultiple, } from \"@tsparticles/engine\";\nconst defaultIndex = 0;\nexport class Absorbers {\n    constructor(container) {\n        this.container = container;\n        this.array = [];\n        this.absorbers = [];\n        this.interactivityAbsorbers = [];\n        container.getAbsorber = (idxOrName) => idxOrName === undefined || isNumber(idxOrName)\n            ? this.array[idxOrName ?? defaultIndex]\n            : this.array.find((t) => t.name === idxOrName);\n        container.addAbsorber = async (options, position) => this.addAbsorber(options, position);\n    }\n    async addAbsorber(options, position) {\n        const { AbsorberInstance } = await import(\"./AbsorberInstance.js\"), absorber = new AbsorberInstance(this, this.container, options, position);\n        this.array.push(absorber);\n        return absorber;\n    }\n    draw(context) {\n        for (const absorber of this.array) {\n            absorber.draw(context);\n        }\n    }\n    handleClickMode(mode) {\n        const absorberOptions = this.absorbers, modeAbsorbers = this.interactivityAbsorbers;\n        if (mode === \"absorber\") {\n            const absorbersModeOptions = itemFromSingleOrMultiple(modeAbsorbers), absorbersOptions = absorbersModeOptions ?? itemFromSingleOrMultiple(absorberOptions), aPosition = this.container.interactivity.mouse.clickPosition;\n            void this.addAbsorber(absorbersOptions, aPosition);\n        }\n    }\n    async init() {\n        this.absorbers = this.container.actualOptions.absorbers;\n        this.interactivityAbsorbers = this.container.actualOptions.interactivity.modes.absorbers;\n        const promises = executeOnSingleOrMultiple(this.absorbers, async (absorber) => {\n            await this.addAbsorber(absorber);\n        });\n        if (promises instanceof Array) {\n            await Promise.all(promises);\n        }\n        else {\n            await promises;\n        }\n    }\n    particleUpdate(particle) {\n        for (const absorber of this.array) {\n            absorber.attract(particle);\n            if (particle.destroyed) {\n                break;\n            }\n        }\n    }\n    removeAbsorber(absorber) {\n        const index = this.array.indexOf(absorber), deleteCount = 1;\n        if (index >= defaultIndex) {\n            this.array.splice(index, deleteCount);\n        }\n    }\n    resize() {\n        for (const absorber of this.array) {\n            absorber.resize();\n        }\n    }\n    stop() {\n        this.array = [];\n    }\n}\n"],
  "mappings": ";;;;;;;;;AACA,IAAM,eAAe;AACd,IAAM,YAAN,MAAgB;AAAA,EACnB,YAAY,WAAW;AACnB,SAAK,YAAY;AACjB,SAAK,QAAQ,CAAC;AACd,SAAK,YAAY,CAAC;AAClB,SAAK,yBAAyB,CAAC;AAC/B,cAAU,cAAc,CAAC,cAAc,cAAc,UAAa,SAAS,SAAS,IAC9E,KAAK,MAAM,aAAa,YAAY,IACpC,KAAK,MAAM,KAAK,CAAC,MAAM,EAAE,SAAS,SAAS;AACjD,cAAU,cAAc,OAAO,SAAS,aAAa,KAAK,YAAY,SAAS,QAAQ;AAAA,EAC3F;AAAA,EACA,MAAM,YAAY,SAAS,UAAU;AACjC,UAAM,EAAE,iBAAiB,IAAI,MAAM,OAAO,gCAAuB,GAAG,WAAW,IAAI,iBAAiB,MAAM,KAAK,WAAW,SAAS,QAAQ;AAC3I,SAAK,MAAM,KAAK,QAAQ;AACxB,WAAO;AAAA,EACX;AAAA,EACA,KAAK,SAAS;AACV,eAAW,YAAY,KAAK,OAAO;AAC/B,eAAS,KAAK,OAAO;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,gBAAgB,MAAM;AAClB,UAAM,kBAAkB,KAAK,WAAW,gBAAgB,KAAK;AAC7D,QAAI,SAAS,YAAY;AACrB,YAAM,uBAAuB,yBAAyB,aAAa,GAAG,mBAAmB,wBAAwB,yBAAyB,eAAe,GAAG,YAAY,KAAK,UAAU,cAAc,MAAM;AAC3M,WAAK,KAAK,YAAY,kBAAkB,SAAS;AAAA,IACrD;AAAA,EACJ;AAAA,EACA,MAAM,OAAO;AACT,SAAK,YAAY,KAAK,UAAU,cAAc;AAC9C,SAAK,yBAAyB,KAAK,UAAU,cAAc,cAAc,MAAM;AAC/E,UAAM,WAAW,0BAA0B,KAAK,WAAW,OAAO,aAAa;AAC3E,YAAM,KAAK,YAAY,QAAQ;AAAA,IACnC,CAAC;AACD,QAAI,oBAAoB,OAAO;AAC3B,YAAM,QAAQ,IAAI,QAAQ;AAAA,IAC9B,OACK;AACD,YAAM;AAAA,IACV;AAAA,EACJ;AAAA,EACA,eAAe,UAAU;AACrB,eAAW,YAAY,KAAK,OAAO;AAC/B,eAAS,QAAQ,QAAQ;AACzB,UAAI,SAAS,WAAW;AACpB;AAAA,MACJ;AAAA,IACJ;AAAA,EACJ;AAAA,EACA,eAAe,UAAU;AACrB,UAAM,QAAQ,KAAK,MAAM,QAAQ,QAAQ,GAAG,cAAc;AAC1D,QAAI,SAAS,cAAc;AACvB,WAAK,MAAM,OAAO,OAAO,WAAW;AAAA,IACxC;AAAA,EACJ;AAAA,EACA,SAAS;AACL,eAAW,YAAY,KAAK,OAAO;AAC/B,eAAS,OAAO;AAAA,IACpB;AAAA,EACJ;AAAA,EACA,OAAO;AACH,SAAK,QAAQ,CAAC;AAAA,EAClB;AACJ;",
  "names": []
}
