{
  "version": 3,
  "sources": ["../../@tsparticles/updater-destroy/browser/Options/Classes/DestroyBounds.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/SplitFactor.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/SplitRate.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/Split.js", "../../@tsparticles/updater-destroy/browser/Options/Classes/Destroy.js", "../../@tsparticles/updater-destroy/browser/Utils.js", "../../@tsparticles/updater-destroy/browser/DestroyUpdater.js"],
  "sourcesContent": ["import { setRangeValue } from \"@tsparticles/engine\";\nexport class DestroyBounds {\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.bottom !== undefined) {\n            this.bottom = setRangeValue(data.bottom);\n        }\n        if (data.left !== undefined) {\n            this.left = setRangeValue(data.left);\n        }\n        if (data.right !== undefined) {\n            this.right = setRangeValue(data.right);\n        }\n        if (data.top !== undefined) {\n            this.top = setRangeValue(data.top);\n        }\n    }\n}\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitFactor extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = 3;\n    }\n}\n", "import { ValueWithRandom } from \"@tsparticles/engine\";\nexport class SplitRate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.value = { min: 4, max: 9 };\n    }\n}\n", "import { OptionsColor, deepExtend, executeOnSingleOrMultiple, } from \"@tsparticles/engine\";\nimport { SplitFactor } from \"./SplitFactor.js\";\nimport { SplitRate } from \"./SplitRate.js\";\nexport class Split {\n    constructor() {\n        this.count = 1;\n        this.factor = new SplitFactor();\n        this.rate = new SplitRate();\n        this.sizeOffset = true;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.factor.load(data.factor);\n        this.rate.load(data.rate);\n        this.particles = executeOnSingleOrMultiple(data.particles, (particles) => {\n            return deepExtend({}, particles);\n        });\n        if (data.sizeOffset !== undefined) {\n            this.sizeOffset = data.sizeOffset;\n        }\n        if (data.colorOffset) {\n            this.colorOffset = this.colorOffset ?? {};\n            if (data.colorOffset.h !== undefined) {\n                this.colorOffset.h = data.colorOffset.h;\n            }\n            if (data.colorOffset.s !== undefined) {\n                this.colorOffset.s = data.colorOffset.s;\n            }\n            if (data.colorOffset.l !== undefined) {\n                this.colorOffset.l = data.colorOffset.l;\n            }\n        }\n    }\n}\n", "import { DestroyBounds } from \"./DestroyBounds.js\";\nimport { Split } from \"./Split.js\";\nexport class Destroy {\n    constructor() {\n        this.bounds = new DestroyBounds();\n        this.mode = \"none\";\n        this.split = new Split();\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.mode) {\n            this.mode = data.mode;\n        }\n        if (data.bounds) {\n            this.bounds.load(data.bounds);\n        }\n        this.split.load(data.split);\n    }\n}\n", "import { getRangeValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst defaultOffset = 0, minDestroySize = 0.5, defaultSplitCount = 0, increment = 1, unbreakableTime = 500, minSplitCount = 0;\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getRangeValue(splitOptions.factor.value), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? defaultOffset),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? defaultOffset),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? defaultOffset),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: \"precise\",\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : defaultOffset, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < minDestroySize) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? defaultSplitCount) + increment;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, unbreakableTime);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= minSplitCount &&\n        (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getRangeValue(splitOptions.rate.value), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n", "import { getRangeValue, percentDenominator, } from \"@tsparticles/engine\";\nimport { Destroy } from \"./Options/Classes/Destroy.js\";\nimport { split } from \"./Utils.js\";\nexport class DestroyUpdater {\n    constructor(engine, container) {\n        this.container = container;\n        this.engine = engine;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, destroyOptions = particlesOptions.destroy;\n        if (!destroyOptions) {\n            return;\n        }\n        particle.splitCount = 0;\n        const destroyBoundsOptions = destroyOptions.bounds;\n        if (!particle.destroyBounds) {\n            particle.destroyBounds = {};\n        }\n        const { bottom, left, right, top } = destroyBoundsOptions, { destroyBounds } = particle, canvasSize = container.canvas.size;\n        if (bottom) {\n            destroyBounds.bottom = (getRangeValue(bottom) * canvasSize.height) / percentDenominator;\n        }\n        if (left) {\n            destroyBounds.left = (getRangeValue(left) * canvasSize.width) / percentDenominator;\n        }\n        if (right) {\n            destroyBounds.right = (getRangeValue(right) * canvasSize.width) / percentDenominator;\n        }\n        if (top) {\n            destroyBounds.top = (getRangeValue(top) * canvasSize.height) / percentDenominator;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.destroy) {\n            options.destroy = new Destroy();\n        }\n        for (const source of sources) {\n            options.destroy.load(source?.destroy);\n        }\n    }\n    particleDestroyed(particle, override) {\n        if (override) {\n            return;\n        }\n        const destroyOptions = particle.options.destroy;\n        if (destroyOptions && destroyOptions.mode === \"split\") {\n            split(this.engine, this.container, particle);\n        }\n    }\n    update(particle) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        const position = particle.getPosition(), bounds = particle.destroyBounds;\n        if (!bounds) {\n            return;\n        }\n        if ((bounds.bottom !== undefined && position.y >= bounds.bottom) ||\n            (bounds.left !== undefined && position.x <= bounds.left) ||\n            (bounds.right !== undefined && position.x >= bounds.right) ||\n            (bounds.top !== undefined && position.y <= bounds.top)) {\n            particle.destroy();\n        }\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
